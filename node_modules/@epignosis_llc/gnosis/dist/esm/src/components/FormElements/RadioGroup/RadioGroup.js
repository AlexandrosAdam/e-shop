
  /**
   * @license
   * author: epignosis front-end team
   * @epignosis_llc/gnosis.js v2.2.1
   * Released under the MIT license.
   */

import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, extends as _extends } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import '../../../../node_modules/core-js/modules/es.array.map.js';
import '../../../../node_modules/core-js/modules/es.array.concat.js';
import { useState, useEffect } from 'react';
import Radio from './Radio.js';
import { container } from './styles.js';
import { createElement as jsx } from '../../../../node_modules/@emotion/react/dist/emotion-react.browser.esm.js';

var _excluded = ["groupname", "options", "onChange", "initialValue", "inline", "size"];

var RadioGroup = function RadioGroup(_ref) {
  var _rest$id;

  var groupname = _ref.groupname,
      options = _ref.options,
      onChange = _ref.onChange,
      _ref$initialValue = _ref.initialValue,
      initialValue = _ref$initialValue === void 0 ? "" : _ref$initialValue,
      _ref$inline = _ref.inline,
      inline = _ref$inline === void 0 ? false : _ref$inline,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? "md" : _ref$size,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(initialValue),
      _useState2 = _slicedToArray(_useState, 2),
      selectedValue = _useState2[0],
      setSelectedValue = _useState2[1];

  var selectValue = function selectValue(e) {
    setSelectedValue(e.target.value);
  };

  useEffect(function () {
    onChange && onChange(selectedValue);
  }, [selectedValue, onChange]);
  return jsx("fieldset", _extends({
    css: container(inline),
    id: (_rest$id = rest === null || rest === void 0 ? void 0 : rest.id) !== null && _rest$id !== void 0 ? _rest$id : groupname
  }, rest), options.map(function (option) {
    return jsx(Radio, _extends({
      key: option.value,
      id: "".concat(groupname, "-").concat(option.value),
      size: size,
      checked: selectedValue === option.value,
      name: groupname,
      onChange: selectValue,
      inline: true
    }, option));
  }));
};

export { RadioGroup as default };
//# sourceMappingURL=RadioGroup.js.map

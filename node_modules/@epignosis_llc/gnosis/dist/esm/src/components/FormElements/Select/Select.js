
  /**
   * @license
   * author: epignosis front-end team
   * @epignosis_llc/gnosis.js v2.2.1
   * Released under the MIT license.
   */

import { objectWithoutProperties as _objectWithoutProperties, defineProperty as _defineProperty, extends as _extends } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import { forwardRef } from 'react';
import classNames from '../../../../node_modules/classnames/index.js';
import Label from '../Label/Label.js';
import { selectContainer } from './styles.js';
import { createElement as jsx } from '../../../../node_modules/@emotion/react/dist/emotion-react.browser.esm.js';

var _excluded = ["id", "status", "size", "label", "inline", "onChange", "children", "containerAttrs"];

var Select = function Select(props, forwardedRef) {
  var _containerAttrs$class;

  var _props$id = props.id,
      id = _props$id === void 0 ? "" : _props$id,
      _props$status = props.status,
      status = _props$status === void 0 ? "valid" : _props$status,
      _props$size = props.size,
      size = _props$size === void 0 ? "md" : _props$size,
      label = props.label,
      _props$inline = props.inline,
      inline = _props$inline === void 0 ? false : _props$inline,
      onChange = props.onChange,
      children = props.children,
      containerAttrs = props.containerAttrs,
      rest = _objectWithoutProperties(props, _excluded);

  var hasLabel = Boolean(label);
  var containerClassNames = classNames(_defineProperty({
    valid: status === "valid",
    error: status === "error",
    inline: hasLabel && inline,
    disabled: Boolean(rest === null || rest === void 0 ? void 0 : rest.disabled)
  }, (_containerAttrs$class = containerAttrs === null || containerAttrs === void 0 ? void 0 : containerAttrs.className) !== null && _containerAttrs$class !== void 0 ? _containerAttrs$class : "", Boolean(containerAttrs === null || containerAttrs === void 0 ? void 0 : containerAttrs.className)));
  return jsx("div", _extends({
    css: function css(theme) {
      return selectContainer(theme, {
        size: size
      });
    }
  }, containerAttrs, {
    className: containerClassNames
  }), hasLabel && jsx(Label, {
    htmlFor: id,
    "aria-labelledby": id
  }, label), jsx("div", {
    className: "select-input-wrapper"
  }, jsx("select", _extends({
    ref: forwardedRef,
    onChange: onChange && function (e) {
      return onChange(e.target.value);
    },
    id: id
  }, rest), children)));
};

var Select$1 = /*#__PURE__*/forwardRef(Select);

export { Select$1 as default };
//# sourceMappingURL=Select.js.map


  /**
   * @license
   * author: epignosis front-end team
   * @epignosis_llc/gnosis.js v2.2.1
   * Released under the MIT license.
   */

import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, extends as _extends, toConsumableArray as _toConsumableArray } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import '../../../../node_modules/core-js/modules/es.array.includes.js';
import '../../../../node_modules/core-js/modules/es.string.includes.js';
import '../../../../node_modules/core-js/modules/es.array.filter.js';
import '../../../../node_modules/core-js/modules/es.object.to-string.js';
import '../../../../node_modules/core-js/modules/es.array.concat.js';
import '../../../../node_modules/core-js/modules/es.array.map.js';
import '../../../../node_modules/core-js/modules/es.function.name.js';
import { useState, useEffect } from 'react';
import Checkbox from './Checkbox.js';
import { checkboxGroupContainer } from './styles.js';
import { createElement as jsx } from '../../../../node_modules/@emotion/react/dist/emotion-react.browser.esm.js';

var _excluded = ["groupname", "options", "onChange", "initialValues", "inline", "size"];

var CheckboxGroup = function CheckboxGroup(_ref) {
  var groupname = _ref.groupname,
      options = _ref.options,
      onChange = _ref.onChange,
      _ref$initialValues = _ref.initialValues,
      initialValues = _ref$initialValues === void 0 ? [] : _ref$initialValues,
      _ref$inline = _ref.inline,
      inline = _ref$inline === void 0 ? false : _ref$inline,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? "md" : _ref$size,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(initialValues),
      _useState2 = _slicedToArray(_useState, 2),
      selectedValues = _useState2[0],
      setSelectedValues = _useState2[1];

  var isPartiallySelected = selectedValues.length > 0 && selectedValues.length < options.length;
  var ariaChecked = isPartiallySelected ? "mixed" : selectedValues.length === options.length;

  var selectValues = function selectValues(e) {
    var selectedValue = e.target.value;

    if (selectedValues.includes(selectedValue)) {
      setSelectedValues(selectedValues.filter(function (value) {
        return selectedValue !== value;
      }));
    } else {
      setSelectedValues([].concat(_toConsumableArray(selectedValues), [selectedValue]));
    }
  };

  var handleGroupChange = function handleGroupChange() {
    if (selectedValues.length) {
      setSelectedValues([]);
    } else {
      setSelectedValues(options.filter(function (option) {
        return !option.disabled;
      }).map(function (option) {
        return option.value;
      }));
    }
  };

  useEffect(function () {
    onChange && onChange(selectedValues);
  }, [selectedValues, onChange]);
  return jsx("fieldset", _extends({
    css: checkboxGroupContainer(inline)
  }, rest), jsx("legend", null, isPartiallySelected && jsx("span", {
    className: "dash"
  }), jsx(Checkbox, {
    id: "".concat(groupname, "-container"),
    label: groupname,
    name: groupname,
    value: "",
    onChange: handleGroupChange,
    size: size,
    checked: selectedValues.length > 0,
    "aria-checked": ariaChecked,
    inline: true
  })), jsx("ul", null, options.map(function (option) {
    return jsx("li", {
      key: option.name
    }, jsx(Checkbox, _extends({
      id: "".concat(groupname, "-").concat(option.value),
      size: size,
      checked: selectedValues.includes(option.value),
      onChange: selectValues,
      inline: true
    }, option)));
  })));
};

export { CheckboxGroup as default };
//# sourceMappingURL=CheckboxGroup.js.map

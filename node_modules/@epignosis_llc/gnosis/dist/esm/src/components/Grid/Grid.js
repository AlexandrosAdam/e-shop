
  /**
   * @license
   * author: epignosis front-end team
   * @epignosis_llc/gnosis.js v2.2.1
   * Released under the MIT license.
   */

import { objectWithoutProperties as _objectWithoutProperties, extends as _extends, typeof as _typeof } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import '../../../node_modules/core-js/modules/es.date.to-string.js';
import '../../../node_modules/core-js/modules/es.object.to-string.js';
import '../../../node_modules/core-js/modules/es.regexp.to-string.js';
import '../../../node_modules/core-js/modules/es.array.map.js';
import 'react';
import { gridContainer, gridItem } from './styles.js';
import { createElement as jsx } from '../../../node_modules/@emotion/react/dist/emotion-react.browser.esm.js';

var _excluded = ["gap", "columnGap", "rowGap", "templateColumns", "as", "children"],
    _excluded2 = ["colSpan", "colStart", "colEnd", "rowSpan", "rowStart", "rowEnd", "as", "children"];

var generateGridValues = function generateGridValues(values) {
  switch (_typeof(values)) {
    case "undefined":
      return null;

    case "string":
      return values;

    case "number":
      return values.toString();

    default:
      return values.map(function (value) {
        return value;
      });
  }
};

var Grid = function Grid(props) {
  var _props$gap = props.gap,
      gap = _props$gap === void 0 ? 2 : _props$gap,
      columnGap = props.columnGap,
      rowGap = props.rowGap,
      templateColumns = props.templateColumns,
      _props$as = props.as,
      as = _props$as === void 0 ? "div" : _props$as,
      children = props.children,
      rest = _objectWithoutProperties(props, _excluded);

  var templateColumnAttrs = generateGridValues(templateColumns);
  var Component = as;
  return jsx(Component, _extends({
    css: gridContainer({
      templateColumns: templateColumnAttrs,
      gap: gap,
      columnGap: columnGap,
      rowGap: rowGap
    })
  }, rest), children);
};

var Item = function Item(props) {
  var colSpan = props.colSpan,
      colStart = props.colStart,
      colEnd = props.colEnd,
      rowSpan = props.rowSpan,
      rowStart = props.rowStart,
      rowEnd = props.rowEnd,
      _props$as2 = props.as,
      as = _props$as2 === void 0 ? "div" : _props$as2,
      children = props.children,
      rest = _objectWithoutProperties(props, _excluded2);

  var colSpanAttrs = generateGridValues(colSpan);
  var colStartAttrs = generateGridValues(colStart);
  var colEndAttrs = generateGridValues(colEnd);
  var rowSpanAttrs = generateGridValues(rowSpan);
  var rowStartAttrs = generateGridValues(rowStart);
  var rowEndAttrs = generateGridValues(rowEnd);
  var Component = as;
  return jsx(Component, _extends({
    css: gridItem({
      colSpan: colSpanAttrs,
      colStart: colStartAttrs,
      colEnd: colEndAttrs,
      rowSpan: rowSpanAttrs,
      rowStart: rowStartAttrs,
      rowEnd: rowEndAttrs
    })
  }, rest), children);
};

Grid.Item = Item;

export { Grid as default };
//# sourceMappingURL=Grid.js.map

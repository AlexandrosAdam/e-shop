
  /**
   * @license
   * author: epignosis front-end team
   * @epignosis_llc/gnosis.js v2.2.1
   * Released under the MIT license.
   */

import '../../../node_modules/core-js/modules/es.array.map.js';
import { Children, cloneElement } from 'react';
import { createElement as jsx, ClassNames } from '../../../node_modules/@emotion/react/dist/emotion-react.browser.esm.js';
import ReactModal from '../../../node_modules/react-modal/lib/index.js';
import Heading from '../Heading/Heading.js';
import SvgCloseCircled from '../../icons/close_circled.svg.js';
import { portalStyles, modalHeader, modalContent, modalFooter } from './styles.js';

var Header = function Header(_ref) {
  var children = _ref.children,
      onClose = _ref.onClose;
  var title = typeof children === "string" ? jsx(Heading, {
    size: "md"
  }, children) : children;
  return jsx("header", {
    css: modalHeader,
    "data-testid": "modal-header"
  }, jsx("div", null, title), onClose && jsx("a", {
    role: "button",
    className: "close-btn",
    "aria-label": "Close button",
    onClick: onClose
  }, jsx(SvgCloseCircled, {
    height: 28
  })));
};

var Body = function Body(_ref2) {
  var children = _ref2.children,
      style = _ref2.style;
  return jsx("article", {
    style: style,
    css: modalContent
  }, children);
};

var Footer = function Footer(_ref3) {
  var children = _ref3.children,
      style = _ref3.style;
  return jsx("footer", {
    style: style,
    css: modalFooter,
    "data-testid": "modal-footer"
  }, children);
};

var Modal = function Modal(_ref4) {
  var children = _ref4.children,
      isOpen = _ref4.isOpen,
      _ref4$onClose = _ref4.onClose,
      onClose = _ref4$onClose === void 0 ? function () {
    return void 0;
  } : _ref4$onClose,
      _ref4$size = _ref4.size,
      size = _ref4$size === void 0 ? "md" : _ref4$size,
      _ref4$rootElementSele = _ref4.rootElementSelector,
      rootElementSelector = _ref4$rootElementSele === void 0 ? "#app" : _ref4$rootElementSele,
      _ref4$closeOnOutsideC = _ref4.closeOnOutsideClick,
      closeOnOutsideClick = _ref4$closeOnOutsideC === void 0 ? true : _ref4$closeOnOutsideC,
      style = _ref4.style;
  var rootElement = document.querySelector(rootElementSelector);
  var clonedChildren = Children.map(children, function (child) {
    return /*#__PURE__*/cloneElement(child, {
      onClose: onClose
    });
  });
  return jsx(ClassNames, null, function (_ref5) {
    var css = _ref5.css;
    return jsx(ReactModal, {
      isOpen: isOpen,
      appElement: rootElement,
      onRequestClose: onClose,
      contentLabel: "modal",
      overlayClassName: {
        base: "overlay-base",
        afterOpen: "overlay-after",
        beforeClose: "overlay-before"
      },
      className: {
        base: "content-base",
        afterOpen: "content-after",
        beforeClose: "content-before"
      },
      closeTimeoutMS: 200,
      portalClassName: css(portalStyles(size)),
      ariaHideApp: false,
      shouldCloseOnOverlayClick: closeOnOutsideClick,
      style: style
    }, clonedChildren);
  });
};

Modal.Header = Header;
Modal.Body = Body;
Modal.Footer = Footer;

export { Modal as default };
//# sourceMappingURL=Modal.js.map

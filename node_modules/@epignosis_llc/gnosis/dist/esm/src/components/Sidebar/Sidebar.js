
  /**
   * @license
   * author: epignosis front-end team
   * @epignosis_llc/gnosis.js v2.2.1
   * Released under the MIT license.
   */

import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import 'react';
import { mainNavContainer } from './styles.js';
import NavItem from './NavItem.js';
import NavHandle from './NavHandle.js';
import { createElement as jsx } from '../../../node_modules/@emotion/react/dist/emotion-react.browser.esm.js';
import { useReducedMotion } from '../../../node_modules/framer-motion/dist/es/utils/use-reduced-motion.mjs.js';
import { LazyMotion } from '../../../node_modules/framer-motion/dist/es/components/LazyMotion/index.mjs.js';
import { domAnimation } from '../../../node_modules/framer-motion/dist/es/render/dom/features-animation.mjs.js';
import { m } from '../../../node_modules/framer-motion/dist/es/render/dom/motion-minimal.mjs.js';

var _excluded = ["isCollapsed", "navHandleLabel", "onToggle", "children"];
var navVariants = {
  expanded: {
    minWidth: "15rem",
    transition: {
      ease: "easeInOut",
      duration: 0.2
    }
  },
  collapsed: {
    minWidth: "4.75rem",
    transition: {
      ease: "easeInOut",
      duration: 0.2,
      delay: 0.1
    }
  },
  a11yExpanded: {
    minWidth: "15rem",
    transition: {
      duration: 0
    }
  },
  a11yCollapsed: {
    minWidth: "4.75rem",
    transition: {
      duration: 0
    }
  }
};

var Sidebar = function Sidebar(_ref) {
  var _ref$isCollapsed = _ref.isCollapsed,
      isCollapsed = _ref$isCollapsed === void 0 ? false : _ref$isCollapsed,
      _ref$navHandleLabel = _ref.navHandleLabel,
      navHandleLabel = _ref$navHandleLabel === void 0 ? "Menu" : _ref$navHandleLabel,
      _ref$onToggle = _ref.onToggle,
      onToggle = _ref$onToggle === void 0 ? function () {
    return void 0;
  } : _ref$onToggle,
      children = _ref.children,
      rest = _objectWithoutProperties(_ref, _excluded);

  var isReducedMotion = useReducedMotion();
  var animate;

  if (isReducedMotion) {
    animate = isCollapsed ? "a11yCollapsed" : "a11yExpanded";
  } else {
    animate = isCollapsed ? "collapsed" : "expanded";
  }

  return jsx(LazyMotion, {
    features: domAnimation
  }, jsx(m.nav, _extends({
    css: mainNavContainer,
    initial: false,
    animate: animate,
    variants: navVariants,
    id: "sidebar"
  }, rest), jsx("div", {
    className: "nav-items-wrapper"
  }, jsx(NavHandle, {
    isExpanded: !isCollapsed,
    navItemLabel: navHandleLabel,
    toggleMainNav: onToggle
  }), children)));
};

Sidebar.Item = NavItem;

export { Sidebar as default };
//# sourceMappingURL=Sidebar.js.map

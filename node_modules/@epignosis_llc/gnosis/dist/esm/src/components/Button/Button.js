
  /**
   * @license
   * author: epignosis front-end team
   * @epignosis_llc/gnosis.js v2.2.1
   * Released under the MIT license.
   */

import { objectWithoutProperties as _objectWithoutProperties, defineProperty as _defineProperty, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import 'react';
import classNames from '../../../node_modules/classnames/index.js';
import Loader from '../Loaders/Loader.js';
import { btnContainer } from './styles.js';
import { createElement as jsx } from '../../../node_modules/@emotion/react/dist/emotion-react.browser.esm.js';
import { LazyMotion } from '../../../node_modules/framer-motion/dist/es/components/LazyMotion/index.mjs.js';
import { domAnimation } from '../../../node_modules/framer-motion/dist/es/render/dom/features-animation.mjs.js';
import { AnimatePresence } from '../../../node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs.js';
import { m } from '../../../node_modules/framer-motion/dist/es/render/dom/motion-minimal.mjs.js';

var _excluded = ["as", "color", "size", "variant", "block", "isLoading", "noGutters", "className", "rounded", "iconBefore", "iconAfter", "children", "disabled"];
var iconSizes = {
  sm: 28,
  md: 30,
  lg: 32
};
var spinnerWrapperVariants = {
  hidden: {
    opacity: 0,
    marginRight: 0,
    transition: {
      duration: 0.1
    }
  },
  visible: {
    opacity: 1,
    marginRight: 6,
    transition: {
      duration: 0.1
    }
  }
};

var Button = function Button(props) {
  var _classNames, _props$id;

  var as = props.as,
      _props$color = props.color,
      color = _props$color === void 0 ? "primary" : _props$color,
      _props$size = props.size,
      size = _props$size === void 0 ? "md" : _props$size,
      _props$variant = props.variant,
      variant = _props$variant === void 0 ? "solid" : _props$variant,
      _props$block = props.block,
      block = _props$block === void 0 ? false : _props$block,
      _props$isLoading = props.isLoading,
      isLoading = _props$isLoading === void 0 ? false : _props$isLoading,
      _props$noGutters = props.noGutters,
      noGutters = _props$noGutters === void 0 ? false : _props$noGutters,
      _props$className = props.className,
      className = _props$className === void 0 ? "" : _props$className,
      _props$rounded = props.rounded,
      rounded = _props$rounded === void 0 ? false : _props$rounded,
      iconBefore = props.iconBefore,
      iconAfter = props.iconAfter,
      children = props.children,
      disabled = props.disabled,
      rest = _objectWithoutProperties(props, _excluded);

  var Component = as || "button";
  var PrefixIcon = iconBefore;
  var SuffixIcon = iconAfter;
  var containerClassNames = classNames((_classNames = {}, _defineProperty(_classNames, className, Boolean(className)), _defineProperty(_classNames, "disabled", disabled || isLoading), _defineProperty(_classNames, "rounded", rounded), _defineProperty(_classNames, "solid", variant === "solid"), _defineProperty(_classNames, "outline", variant === "outline"), _defineProperty(_classNames, "ghost", variant === "ghost"), _defineProperty(_classNames, "link", variant === "link"), _defineProperty(_classNames, "icon-after", SuffixIcon), _defineProperty(_classNames, "icon-before", PrefixIcon), _classNames));
  return jsx(LazyMotion, {
    features: domAnimation
  }, jsx(Component, _extends({
    css: function css(theme) {
      return btnContainer(theme, {
        color: color,
        block: block,
        size: size,
        noGutters: noGutters
      });
    },
    className: containerClassNames
  }, (as === "button" || as === undefined) && {
    disabled: disabled || isLoading
  }, rest), jsx(AnimatePresence, null, isLoading && jsx(m.div, {
    key: (_props$id = props.id) !== null && _props$id !== void 0 ? _props$id : "spinner",
    style: {
      display: "inline-flex",
      x: -12
    },
    className: "loading",
    "aria-label": "loading",
    initial: "hidden",
    animate: "visible",
    exit: "hidden",
    variants: spinnerWrapperVariants
  }, jsx(Loader, {
    size: "md"
  }))), PrefixIcon && jsx(PrefixIcon, {
    height: iconSizes[size],
    className: "icon",
    "data-testid": "prefix-icon"
  }), jsx("span", {
    className: "btn-text"
  }, children), SuffixIcon && jsx(SuffixIcon, {
    height: iconSizes[size],
    className: "icon",
    "data-testid": "suffix-icon"
  })));
};

export { Button as default };
//# sourceMappingURL=Button.js.map


  /**
   * @license
   * author: epignosis front-end team
   * @epignosis_llc/gnosis.js v2.2.1
   * Released under the MIT license.
   */

import { toConsumableArray as _toConsumableArray } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import '../../../node_modules/core-js/modules/es.array.from.js';
import '../../../node_modules/core-js/modules/es.string.iterator.js';
import '../../../node_modules/core-js/modules/es.array.concat.js';
import { useMemo } from 'react';

var ellipsis = "...";

var range = function range(start, end) {
  var length = end - start + 1;
  /*
  	Create an array of certain length and set the elements within it from
    start value to end value.
  */

  return Array.from({
    length: length
  }, function (_, idx) {
    return idx + start;
  });
};

var FIRST_PAGE_INDEX = 1; // first page index

var NO_DISPLAYING_BOXES_WITHOUT_ELLIPSIS = 5; // NO_DISPLAYING_BOXES is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS

var usePagination = function usePagination(currentPage, totalPages) {
  var siblingCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  return useMemo(function () {
    var totalDisplyedBoxes = siblingCount + NO_DISPLAYING_BOXES_WITHOUT_ELLIPSIS;
    /*
      Case 1:
      If the number of pages is less than the page numbers we want to show in our
      paginationComponent, we return the range [1..totalPages]
    */

    if (totalDisplyedBoxes >= totalPages) {
      return range(FIRST_PAGE_INDEX, totalPages);
    } // Calculate left and right sibling index and make sure they are within range 1 and totalPages


    var leftSiblingIndex = Math.max(currentPage - siblingCount, FIRST_PAGE_INDEX);
    var rightSiblingIndex = Math.min(currentPage + siblingCount, totalPages); // We do not show dots just when there is just one page number to be inserted between
    // the extremes of sibling and the page limits i.e 1 and totalPages.
    // Hence we are using leftSiblingIndex > 2 and rightSiblingIndex < totalPages - 2

    var shouldShowLeftDots = leftSiblingIndex > 2;
    var shouldShowRightDots = rightSiblingIndex < totalPages - 2;
    /*
    	Case 2: No left dots to show, but rights dots to be shown
    */

    if (!shouldShowLeftDots && shouldShowRightDots) {
      var leftItemCount = 3 + 2 * siblingCount;
      var leftRange = range(1, leftItemCount);
      return [].concat(_toConsumableArray(leftRange), [ellipsis, totalPages]);
    }
    /*
    	Case 3: No right dots to show, but left dots to be shown
    */


    if (shouldShowLeftDots && !shouldShowRightDots) {
      var rightItemCount = 3 + 2 * siblingCount;
      var rightRange = range(totalPages - rightItemCount + 1, totalPages);
      return [FIRST_PAGE_INDEX, ellipsis].concat(_toConsumableArray(rightRange));
    }
    /*
    	Case 4: Both left and right dots to be shown
    */


    if (shouldShowLeftDots && shouldShowRightDots) {
      var middleRange = range(leftSiblingIndex, rightSiblingIndex);
      return [FIRST_PAGE_INDEX, ellipsis].concat(_toConsumableArray(middleRange), [ellipsis, totalPages]);
    }

    return [];
  }, [currentPage, totalPages]);
};

export { ellipsis, usePagination };
//# sourceMappingURL=usePagination.js.map


  /**
   * @license
   * author: epignosis front-end team
   * @epignosis_llc/gnosis.js v2.2.1
   * Released under the MIT license.
   */

import functionUncurryThis from '../internals/function-uncurry-this.js';
import functionName from '../internals/function-name.js';
import '../internals/redefine.js';
import anObject$1 from '../internals/an-object.js';
import objectIsPrototypeOf from '../internals/object-is-prototype-of.js';
import toString from '../internals/to-string.js';
import fails$1 from '../internals/fails.js';
import regexpFlags from '../internals/regexp-flags.js';
import { r as redefine$1 } from '../../../_virtual/redefine.js';

var uncurryThis = functionUncurryThis;
var PROPER_FUNCTION_NAME = functionName.PROPER;
var redefine = redefine$1.exports;
var anObject = anObject$1;
var isPrototypeOf = objectIsPrototypeOf;
var $toString = toString;
var fails = fails$1;
var regExpFlags = regexpFlags;

var TO_STRING = 'toString';
var RegExpPrototype = RegExp.prototype;
var n$ToString = RegExpPrototype[TO_STRING];
var getFlags = uncurryThis(regExpFlags);

var NOT_GENERIC = fails(function () { return n$ToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
// FF44- RegExp#toString has a wrong name
var INCORRECT_NAME = PROPER_FUNCTION_NAME && n$ToString.name != TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.es/ecma262/#sec-regexp.prototype.tostring
if (NOT_GENERIC || INCORRECT_NAME) {
  redefine(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    var p = $toString(R.source);
    var rf = R.flags;
    var f = $toString(rf === undefined && isPrototypeOf(RegExpPrototype, R) && !('flags' in RegExpPrototype) ? getFlags(R) : rf);
    return '/' + p + '/' + f;
  }, { unsafe: true });
}
//# sourceMappingURL=es.regexp.to-string.js.map
